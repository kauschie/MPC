\\ Dr. Amy Gancarz-Kausch Stop Task Program
\\ Started 05/21/2021
\\ By Michael A. Kausch
\\ Features:


\\Inputs
^LeftPoke = 1
^RightPoke = 2
^CenterPoke = 3

\\Outputs
^LStimLight = 1
^RStimLight = 2
^HouseLight = 3
^CenterLight = 4
^Pump = 4
^Sonalert = 5
^Red = 6
^Yellow = 7
^Green  = 8
^LPump = 9
^RPump = 10

\A Variables Settable in the Macro
^SessionDuration = 0   \ session duration in centiseconds

\^PumpDuration    = 5    \ pump duration in centiseconds



\B  Main Data Array
^SessionEnd = 0


\C  IRT Array


\D  Program Vars
^CurrentVHT = 0
^TrialType = 1

\E  
\F
\G  
\H
\I  Initiation Reaction Time Array
\J
\K  
\L  
\M  
\N   
\O
\P  
\Q  
\R  
\S  
\T - Timer Array
^SessionTimer = 0
^GoRTimer = 1

\U - Stop and Go Probability; 1 for Go Trial, 2 for Stop Trial
\V - Variable Hold Time List - randomly selected w/o replacement each trial
\W  = poke counter; ((( W(0) - LeftPoke    |||||||  W(1) - RightPoke )))
\X  data array counter
\Y
\Z   Signals
^Z_Stop        = 0
^Z_Start        = 1
^Z_GoRT         = 2
^Z_StopGoRT     = 3
^Z_InitRT       = 4
^Z_StopInitRT   = 5
^Z_MoveRT          = 6


DIM A = 1
DIM B = 2
DIM C=10000
DIM D = 1
DIM W = 1

LIST V = 0.04, 0.56, 1.12, 1.68, 2.28, 2.88, 3.44, 4.00
LIST U = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2

program design
I:O (all states are sequential unless noted)

Vars
    Variable Hold Time  - average hold time set for each individual rat for entire session, 
                        - cumulative time spent in hole (does not reset if total duration not met)
                        - selected w/o replacement [0.04, 0.56, 1.12, 1.68, 2.28, 2.88, 3.44 and 4.0s]
    Trial Type - 1 for Go, 2 for Stop, select from list [1,1,1,2] without replacement 
                - select after the 
    pump duration  = 2,010 / (1+ 0.01RT) where RT = Go RT in ms
                    eg. a 500ms Go RT would result in solenoid being open for 335ms which produces 50uL
                    250ms Go RT results in valve being open 570ms which produces 84uL
                    manipulated every "go" trial and saved as this variable
    stop signal delay - changes from trial to trial +/- 20ms depending on successful/unsuccessful trial

timers:
    Variable Hold Timer - measures to see if snout has been in hole long enough
    Initiation Reaction Timer - recorded measurement
    Go RT timer - 
    sessiontimer
    pump timer - duration that pump is on for. 
                        

session timer - 30 min max or 60 trials
              - record time finished if it ends sooner





Any Trial:

trial starts: center light light on, determine if Stop response (25% probability) vs Go Response (75% probability)
nose poke in center hole for Variable Hold Time: turn center light off (Go Signal), 
                                               : start timer to measure time it takes to remove snout from hole
                                                            (Initiation RT)

            ----------------Program Branches based on 75% Go and 25% Stop probability----------------
                                               : if 75% "Go" probability scenario start Go RT timer

if 75% and 
        rat removes snout from center hole: end Initiation RT
        
        if right poke: end Go RT, 
                     : Move RT = Go RT - Initiation RT
                     : issue reward that scales based on GO RT length
                     : record most recent reward size or time


if 25% and 
        rat removes snout from center hole: end Initiation RT 
                                          : start Variable Stop Signal Delay (vSSD) timer
        
        //if right poke before vSSD timer >= vSSD: **unknown** (maybe? Stop Failure; change vSSD if required) - Don't look for this, it's not probable given the small amount of time
        if var Stop Signal Delay finishes: issue tone for stop signal
                                         : start Change RT timer
                if left poke during ChangeRT: stop ChangeRT timer; 
                                            : successful stop,
                                            : gets reward for most recently reinforced Go probability scenario
                                            : record ChangeRT
                                            : increment vSSD if required
                                            : new trial
                if right poke during ChangeRT: stop ChangeRT timer; 
                                             : stop failure
                                             : decrement vSSD if required
                                             : new trial



\\***************************************************
\       Import Data from Previous Data Session
\***************************************************


S.S.1,

S1, \\ import data here using inline pascal

0.01: Z^Z_Start ---> SX



\***************************************************
\                   Session Timer
\***************************************************
\\ increments t(^sessiontimer) until it reaches the a(^sessionduration)
\\ afterwards it issues a z^z_stop signal that terminates the program

S.S.2,

S1,

//initialize any variables after data import

#Z^Z_Start:  ---> S2

S2,

#START: ---> S3

S3,

#Z^Z_Stop: SET B(^SessionEnd)=T(^SessionTimer) ---> S4
0.01": ADD T(^SessionTimer); IF T(^SessionTimer)>=A(^SessionDuration) [@True, @False]
    @T: Z^Z_Stop; SET B(^SessionEnd)=T(^SessionTimer)---> S4
    @F: ---> S3


S4,
5":---> STOPABORTFLUSH


\***************************************************
\           Main Trial Logic
\***************************************************

S.S.3,

S1, \\ Initialize any variable after data import

#Z^Z_Start: RANDD D(^CurrentVHT) = V;
            RANDD D(^TrialType) = U; 
            SET X = 0;
            ON ^RStimLight ---> S2

S2,

#R^CenterPoke: ADD T(^HoldTimer); IF T(^HoldTimer) >= D(^CurrentVHT) [@StartGoTimer]
    @StartGoTimer: OFF ^CenterLight, Z^Z_GoRT, Z^Z_InitRT ---> S3


S3,

#R^CenterPoke: ADD I(X) ---> SX
0.02": IF D(^TrialType) = 1 [@Go, @Stop] 
            @Go: Z^Z_MoveRT ---> S4
            @Stop: ---> S5

S4,

0.01": ADD T(^)




\***************************************************
\          Go RT
\***************************************************

S.S.4,

S1,

#Z^Z_GoRT: ---> S2

S2,

#Z^Z_StopGoRT: ---> S3
0.01": ADD T(^GoRTimer) ---> SX




\***************************************************
\                       Move RT
\***************************************************

S.S.6,

S1,

#Z^Z_MoveRT: ---> S2

S2,

#Z^Z_StopInitRT: ---> S3 \ Do post processing/storing of data
#R^RightPoke: ADD T(^InitRTimer); if T(^InitRTimer)>=---> SX
