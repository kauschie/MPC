\\ Amy VI Program
\\ Started 01-29-2016
\\ By Michael A. Kausch
\\ Features: VI Schedule of Reinforcement on 20-value Fleshler-Hoffman Progression (no subject response necessary for administration of rewards)
\\ VI Commences once cues finish being issued
\\ Set VI in Macro
\\ Set Cue in macro (stim light, sonalert, or both)
\\ Active / Inactive Responses recorded in bins 10 seconds before cue and during cue
\\ Active / Inactive Response rates recorded in bins for the 10second interval before cue and during cue
\\ 10 second before cue is adjusted in the event an interval is less than 10 seconds
\\ 5/21/17: rearranged outputs to accomodate output 5 break


\\Inputs
^LeftPoke = 1
^RightPoke = 2
^MiddlePoke = 3

\\Outputs
\^LStimLight = 1
\^RStimLight = 2
^HouseLight = 3
^Pump = 4
^Sonalert = 1
^Red = 6
^Yellow = 7
^Green  = 8

\A Control Variables
^SessionDuration = 0   \ session duration in centiseconds
^VIMean = 1  \ mean value for the VI array
^ActivePoke = 2 \ 1 for left and 2 for right
^CueType = 3 \ 1 for stim light, 2 for sonalert, 3 for both
^CueDuration = 4 \ duration of cue in centiseconds
^PumpDuration    = 5    \ pump duration in centiseconds
^InactivePoke    = 6    \ program auto sets this variable to be the inactive lever based on macro input of A(2)
\^TimeOutDuration = 8 \ time of post-VI timeout in centiseconds


\B  Data Array
^Rewards = 0
^ActB4Cue = 1
^InactB4Cue = 2
^ActCue    = 3
^InactCue = 4
^ActTotal = 5
^InactTotal = 6

\C  IRT Array
\    (-1) Act Poke B4 Cue
\    (-2) Inact Poke B4 Cue
\    (-3) Reward Issued
\     (-5) denotes new VI active
\    (-6) Act Poke during Cue
\    (-7) Inact Poke during Cue
\    (-8) Act Poke BB4Q
\     (-9) Inact Poke BB4Q

\D  Current VI Time Variable
\E   Error Array
\F
\G   Cue Duration (0 for BBQ, 1 for BQ)
\H
\I   C Array Counter
\J
\K   VI Array
\L    ActRsp during cue bin
\M  InactRsp during cue bin
\N   Variable Reward Timer Array
\O
\P  Act Rsp before cue Bin
\Q  Inact Rsp before cue Bin
\R
\S  Bin Counter
\T
^SessionTimer  = 0
^VITimer       = 1
^SonalertTimer      = 2
^StimLightTimer    = 3
^PumpTimer        = 4
^BQTimer        = 5
\^BinTimer       = 6
\^TimeOutTimer    = 7

\U actrsp before cue rate
\V actrsp during cue rate
\W
\X
\Y
\Z   Signals
^Z_End = 1
^Z_Reward = 2
^Z_VIStart = 3
\^Z_TimeOut = 4


DIM A=6
DIM C=10000
DIM B=6
DIM T=5
DIM G=1
DIM P=1000
DIM Q=1000
DIM L=1000
DIM M=1000
DIM U=1000
DIM V=1000



LIST K = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\ Session Clock  \\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

S.S.1,

S1,\\ Wait for macro to initialize variables

#Start: ---> S2

S2,

0.01": ADD T(^SessionTimer); IF T(^SessionTimer) >= A(^SessionDuration) [@End, @cont]
                                @End: Z^Z_End ---> S3
                                @Cont: ---> SX
S3,

3": ---> STOPABORTFLUSH

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\ VI Control \\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

S.S.2,

S1,

0.01":  ---> S2

S2,

#Start: INITCONSTPROBARR K,A(^VIMean); RANDI D = K; SET C(I)=-5, S=1;
            SET P(S+1)=-987.987, Q(S+1)=-987.987, L(S+1)=-987.987, M(S+1)=-987.987, U(S+1)=-987.987, V(S+1)=-987.987;
            ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987; Z^Z_VIStart; IF A(^ActivePoke)=1 [@left, @right]
                                                                                            @left: SET A(^InactivePoke) = 2 ---> S3
                                                                                            @right: SET A(^InactivePoke) = 1 ---> S3

S3,

0.01": ADD T(^VITimer); IF T(^VITimer) >= D  [@VIOver]
                @VIOver: Z^Z_Reward; ADD B(^Rewards); SET T(^VITimer)=0;
                                    SET C(I)=-3; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987;
                                    RANDI D = K; SET C(I)=-5; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987  ---> S4

S4, \\ wait for rewards to finish

#Z^Z_VIStart: ---> S3


\\S5, \\\ Time-out before next VI

\\0.01": ADD T(^TimeOutTimer); IF T(^TimeOutTimer)>= A(^TimeOutDuration) [@TimeOutOver]
\\            @TimeOutOver:   ---> S3



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\ Nose Poke CTRL \\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


S.S.3,

S1,

#Z^Z_VIStart: IF D-A(^CueDuration)<0 [@skipcountdown, @countdownuntilrecording]
    @skip: SET G(1) = D ---> S3
    @countdown: SET G(0) = D-A(^CueDuration), G(1)=A(^CueDuration) ---> S2

S2,
#Z^Z_End: ---> S5
#RA(^ActivePoke): ADD B(^ActTotal); SET C(I)=-8; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987 ---> SX
#RA(^InactivePoke): ADD B(^InactTotal); SET C(I)=-9; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987 ---> SX
0.01": ADD T(^BQTimer); IF T(^BQTimer)>= G(0) [SET T(^BQTimer) = 0, G(0)=0] ---> S3

S3, \\ begin recording responses [cue duration] before reward issued (or as soon as vi is decided in the event that it's less than 10 seconds)

#Z^Z_End: ---> S5
#Z^Z_Reward: ---> S4
#RA(^ActivePoke): ADD B(^ActTotal), B(^ActB4Cue), P(S); ARITHMETICMEAN P(0)=P,1,S; SET C(I)=-1; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987 ---> SX
#RA(^InactivePoke): ADD B(^InactTotal), B(^InactB4Cue), Q(S); ARITHMETICMEAN Q(0)=Q,1,S; SET C(I)=-2; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987 ---> SX

S4, \\ begin recording responses while cues have been issued

#Z^Z_End: ---> S5
#Z^Z_VIStart: SET U(S)=P(S)/G(1), V(S)=L(S)/G(1); ARITHMETICMEAN U(0)=U,1,S; ARITHMETICMEAN V(0)=V,1,S;
                                    ADD S; SET P(S)=0, P(S+1)=-987.987, Q(S)=0, Q(S+1)=-987.987, L(S)=0, L(S+1)=-987.987, M(S)=0, M(S+1)=-987.987, U(S)=0, U(S+1)=-987.987, V(S)=0, V(S+1)=-987.987;
                                    IF D-A(^CueDuration)<0 [@skipcountdown, @countdownuntilrecording]
                                                        @skip: SET G(1) = D ---> S3
                                                        @countdown: SET G(0) = D-A(^CueDuration), G(1)=A(^CueDuration) ---> S2
#RA(^ActivePoke): ADD B(^ActTotal), B(^ActCue), L(S); ARITHMETICMEAN L(0)=L,1,S; SET C(I)=-6; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987 ---> SX
#RA(^InactivePoke): ADD B(^InactTotal), B(^InactCue), M(S); ARITHMETICMEAN M(0)=M,1,S; SET C(I)=-7; ADD I; SET C(I)=T(^SessionDuration); ADD I; SET C(I)=-987.987 ---> SX

\S5,

\0.01":  SET U(S)=P(S)/G(1), V(S)=L(S)/G(1); ARITHMETICMEAN U(0)=U,1,S, V(0),V,1,S ---> SX

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\Sonalert \\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

S.S.4,

S1,

#START: IF A(^CueType) = 1 [@yes, @next]
        @yes: ---> S2
        @next: IF A(^CueType) = 3 [] ---> S2


S2,

#Z^Z_Reward: ON ^Sonalert ---> S3

S3,

0.01": ADD T(^SonalertTimer); IF T(^SonalertTimer) >= A(^CueDuration) [@end]
                                    @end: OFF ^Sonalert; SET T(^SonalertTimer)=0; Z^Z_VIStart ---> S2

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\Stimulus Light\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

S.S.5,

S1,

#START: IF A(^CueType) = 2 [@yes, @next]
        @yes: ---> S2
        @next: IF A(^CueType) = 3 [] ---> S2

S2,

#Z^Z_Reward: ON A(^ActivePoke) ---> S3

S3,

0.01": ADD T(^StimLightTimer); IF T(^StimLightTimer) >= A(^CueDuration) [@end]
                @end: OFF A(^ActivePoke); SET T(^StimLightTimer)=0; Z^Z_VIStart ---> S2


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\ Pump \\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

S.S.6,

S1,

#START: IF A(^CueType) = 0 [@pumponly, @cue]
        @pump: ---> S4
        @cue: ---> S2

S2,

#Z^Z_Reward: ON ^Pump ---> S3

S3,

0.01": ADD T(^PumpTimer); IF T(^PumpTimer) >= A(^PumpDuration) [OFF ^Pump; SET T(^PumpTimer)=0] ---> S2

S4,

#Z^Z_Reward: ON ^Pump ---> S5

S5,

0.01": ADD T(^PumpTimer); IF T(^PumpTimer) >= A(^PumpDuration) [OFF ^Pump; SET T(^PumpTimer)=0; Z^Z_VIStart] ---> S4



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\ SHOW COMMANDS \\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

S.S.7,

S1,

0.01":     SHOW 1,Session Time,T(^SessionTimer), 2,Current Interval,D, 3,Interval Timer,T(^VITimer), 4,BQ Duration,G(0), 5,BQ Timer,T(^BQTimer);
        SHOW 6,Active Total,B(^ActTotal), 7,Act B4Q,B(^ActB4Cue), 8,Act During Q,B(^ActCue), 10,Rewards,B(^Rewards);
        SHOW 11,Inactive Total,B(^InactTotal), 12,Inact B4Q,B(^InactB4Cue), 13,Inact During Q,B(^InactCue);
        SHOW 16,ActRsp B4Q Bin,P(S), 17,ActRsp B4Q Mean,P(0), 18,ActRsp DurQ Bin,L(S), 19,ActRsp DurQ Mean,L(0);
        SHOW 21,InactRsp B4Q Bin,Q(S), 22,InactRsp B4Q Mean,Q(0), 23,InactRsp DurQ Bin,M(S), 24,InactRsp DurQ Mean,M(0);
        SHOW 26,B4Q Rate,U(S), 27,B4Q Rate Mean,U(0), 28,DurQ Rate,V(S), 29,DurQ Rate Mean,V(0) ---> SX

        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\ BIN CTRL \\\\\\\\\\\\\\\\\ ***************COMMENTED OUT
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\S.S.8,

\S1,

\#Start: IF A(^BinDuration) > 0 [@calcbins, @nobin]
  \          @calcbins: SET P(S+1)=-987.987, Q(S+1)=-987.987, R(S+1)=-987.987 ---> S2
  \          @nobins: SET P(S)=-987.987, Q(S)=-987.987, R(S)=-987.987 ---> SX

\S2,

 \0.01": ADD T(^BinTimer); IF T(^BinTimer)>=A(^BinDuration) [@T]
  \               @T: ADD S; SET T(^BinTimer)=0, P(S)=0, P(S+1)=-987.987, Q(S)=0, Q(S+1)=-987.987 ---> S2

